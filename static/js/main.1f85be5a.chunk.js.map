{"version":3,"sources":["Components/Layout/MainLayout.js","Components/Layout/Header.js","Components/Layout/Content.js","Components/Layout/Footer.js","Components/Common/PageSpinner.js","Components/index.js","Pages/OnePageWebSite/OnePageWebSite.js","App.js","serviceWorker.js","index.js"],"names":["MainLayout","props","useState","className","fluid","children","Header","handleToggleSideBar","isShopMobileNav","setIsShowMobileNav","type","onClick","prevState","id","style","left","href","class","Content","Tag","tag","restProps","console","log","defaultProps","Container","Footer","target","PageSpinner","color","marginTop","role","LandingSecion","React","lazy","About","Services","Contact","OnePageWebSite","Suspense","fallback","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uSAkBeA,EAfI,SAACC,GAAW,IAAD,EACkBC,oBAAS,GAD3B,6BAG5B,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,0BAAMC,UAAU,YAEd,kBAAC,EAAD,CAASC,OAAK,GAAEH,EAAMI,WAExB,kBAAC,EAAD,QCiDSC,G,MA3DA,SAAC,GAA4B,EAA1BC,oBAA2B,IAAD,EACIL,oBAAS,GADb,mBACnCM,EADmC,KAClBC,EADkB,KAQ1C,OACE,kBAAC,WAAD,KAGE,4BACEC,KAAK,SACLP,UAAU,0BACVQ,QAXsB,WAC1BF,GAAmB,SAACG,GAAD,OAAgBA,OAY9BJ,EACC,uBAAGL,UAAU,sBAEb,uBAAGA,UAAU,sBAGjB,4BACEU,GAAG,SACHV,UAAU,+CACVW,MAAON,EAAkB,CAAEO,KAAM,KAAQ,IAEzC,yBAAKZ,UAAU,YACb,4BACE,wBAAIA,UAAU,UACZ,uBAAGa,KAAK,SACR,uBAAGC,MAAM,eADT,IAC2B,sCACzB,wCAGJ,4BACE,uBAAGD,KAAK,UACR,uBAAGC,MAAM,eADT,IAC2B,yCAG7B,4BACE,uBAAGD,KAAK,aACN,uBAAGb,UAAU,iBADf,IACmC,4CAGrC,4BACE,uBAAGa,KAAK,YACN,uBAAGb,UAAU,mBADf,IACqC,iD,gBC/C7Ce,EAAU,SAAC,GAAgC,IAAzBC,EAAwB,EAA7BC,IAAaC,EAAgB,uBAE9C,OADAC,QAAQC,IAAIJ,GACL,kBAACA,EAAQE,IAGlBH,EAAQM,aAAe,CACrBJ,IAAKK,KAGQP,QC8BAQ,EAxCA,WACb,OACE,kBAAC,WAAD,KAEE,4BAAQb,GAAG,UACT,yBAAKV,UAAU,aAKb,yBAAKA,UAAU,WACb,uBAAGa,KAAK,iCAAiCb,UAAU,QAAnD,2BAIF,yBAAKA,UAAU,wBACb,uBAAGa,KAAK,IAAIb,UAAU,iBACpB,uBAAGA,UAAU,qBAEf,uBACEa,KAAK,gDACLb,UAAU,kBAEV,uBAAGA,UAAU,sBAEf,uBACEa,KAAK,8BACLb,UAAU,iBACVwB,OAAO,UAEP,uBAAGxB,UAAU,0BCLZyB,EAzBK,SAAC,GAA0B,EAAxBC,MACrB,OACE,yBAAK1B,UAAU,8BAA8BW,MAAO,CAAEgB,UAAW,UAC/D,yBAAK3B,UAAU,eACb,yBAAKA,UAAU,iBAAiB4B,KAAK,UACnC,0BAAM5B,UAAU,WAAhB,kBCNG6B,EAAgBC,IAAMC,MAAK,kBACtC,gCAGWC,EAAQF,IAAMC,MAAK,kBAAM,gCAEzBE,EAAWH,IAAMC,MAAK,kBAAM,gCAE5BG,EAAUJ,IAAMC,MAAK,kBAAM,gCCYzBI,EAbQ,WACrB,OACE,kBAAC,IAAMC,SAAP,CAAgBC,SAAU,kBAAC,EAAD,OACxB,kBAACR,EAAD,MACA,0BAAMnB,GAAG,QACP,kBAACsB,EAAD,MACA,kBAACC,EAAD,MACA,kBAACC,EAAD,SCCOI,MAZf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,UCEUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.1f85be5a.chunk.js","sourcesContent":["import React, { useState, Fragment } from \"react\";\r\nimport { Content, Header, Footer } from \"./index\";\r\n\r\nconst MainLayout = (props) => {\r\n  const [sideBarCollapes, setSideBarCollapes] = useState(false);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Header />\r\n      <main className=\"wrapper \">\r\n        {/* <SideBar sideBarCollapes={sideBarCollapes}></SideBar> */}\r\n        <Content fluid>{props.children}</Content>\r\n      </main>\r\n      <Footer />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default MainLayout;\r\n","import React, { useState, Fragment } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nconst Header = ({ handleToggleSideBar }) => {\r\n  const [isShopMobileNav, setIsShowMobileNav] = useState(false);\r\n\r\n  // Function.\r\n  const toggleSideMobileNav = () => {\r\n    setIsShowMobileNav((prevState) => !prevState);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      {/* <!-- ======= Mobile nav toggle button ======= --> */}\r\n\r\n      <button\r\n        type=\"button\"\r\n        className=\"mobile-nav-toggle  text\"\r\n        onClick={toggleSideMobileNav}\r\n      >\r\n        {isShopMobileNav ? (\r\n          <i className=\"fas fa-times text\"></i>\r\n        ) : (\r\n          <i className=\"fas fa-bars text\"></i>\r\n        )}\r\n      </button>\r\n      <header\r\n        id=\"header\"\r\n        className=\"d-flex flex-column justify-content-center   \"\r\n        style={isShopMobileNav ? { left: \"0\" } : {}}\r\n      >\r\n        <nav className=\"nav-menu\">\r\n          <ul>\r\n            <li className=\"active\">\r\n              <a href=\"#hero\">\r\n              <i class=\"bx bx-home\"></i> <span>Home</span>\r\n                <span>Home</span>\r\n              </a>\r\n            </li>\r\n            <li>\r\n              <a href=\"#about\">\r\n              <i class=\"bx bx-user\"></i> <span>About</span>\r\n              </a>\r\n            </li>\r\n            <li>\r\n              <a href=\"#services\">\r\n                <i className=\"bx bx-server\"></i> <span>Services</span>\r\n              </a>\r\n            </li>\r\n            <li>\r\n              <a href=\"#contact\">\r\n                <i className=\"bx bx-envelope\"></i> <span>Contact</span>\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        {/* <!-- .nav-menu --> */}\r\n      </header>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nimport { Container } from \"reactstrap\";\r\n\r\nconst Content = ({ tag: Tag, ...restProps }) => {\r\n  console.log(Tag);\r\n  return <Tag {...restProps} />;\r\n};\r\n\r\nContent.defaultProps = {\r\n  tag: Container,\r\n};\r\n\r\nexport default Content;\r\n","import React, { Fragment } from \"react\";\r\nimport \"./layout.css\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <Fragment>\r\n      {/* <!-- ======= Footer ======= --> */}\r\n      <footer id=\"footer\">\r\n        <div className=\"container\">\r\n          {/* <!-- <div className=\"copyright\">\r\n          &copy; Copyright <strong><span>MyResume</span></strong\r\n          >. All Rights Reserved\r\n        </div> --> */}\r\n          <div className=\"credits\">\r\n            <a href=\"http://yourextremefitness.com/\" className=\"text\">\r\n              | YourExtremeFitness |\r\n            </a>\r\n          </div>\r\n          <div className=\" footer-social-links\">\r\n            <a href=\"#\" className=\"facebook text\">\r\n              <i className=\"bx bxl-facebook\"></i>\r\n            </a>\r\n            <a\r\n              href=\"https://www.instagram.com/yourextremefitness/\"\r\n              className=\"instagram text\"\r\n            >\r\n              <i className=\"bx bxl-instagram\"></i>\r\n            </a>\r\n            <a\r\n              href=\" https://wa.me/917902828908\"\r\n              className=\"instagram text\"\r\n              target=\"_blank\"\r\n            >\r\n              <i className=\"fab fa-whatsapp\"></i>\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </footer>\r\n      {/* <!-- End Footer --> */}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\n\r\nconst PageSpinner = ({ color = \"primary\" }) => {\r\n  return (\r\n    <div className=\"cr-page-spinner text-center\" style={{ marginTop: \"200px\" }}>\r\n      <div className=\"text-center\">\r\n        <div className=\"spinner-border\" role=\"status\">\r\n          <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nPageSpinner.propTypes = {\r\n  color: PropTypes.oneOf([\r\n    \"primary\",\r\n    \"secondary\",\r\n    \"success\",\r\n    \"danger\",\r\n    \"warning\",\r\n    \"info\",\r\n    \"light\",\r\n    \"dark\",\r\n  ]),\r\n};\r\n\r\nexport default PageSpinner;\r\n","import React from \"react\";\r\n\r\nexport const LandingSecion = React.lazy(() =>\r\n  import(\"./LandingSecion/LandingSecion\")\r\n);\r\n// About.\r\nexport const About = React.lazy(() => import(\"./About/About\"));\r\n// Services.\r\nexport const Services = React.lazy(() => import(\"./Services/Services\"));\r\n// Conatct.\r\nexport const Contact = React.lazy(() => import(\"./Contact/Contact\"));\r\n","import React from \"react\";\r\nimport { PageSpinner } from \"../../Components/Common\";\r\nimport {\r\n  LandingSecion,\r\n  About,\r\n  Services,\r\n  Contact,\r\n} from \"../../Components/index\";\r\n\r\nconst OnePageWebSite = () => {\r\n  return (\r\n    <React.Suspense fallback={<PageSpinner />}>\r\n      <LandingSecion></LandingSecion>\r\n      <main id=\"main\">\r\n        <About></About>\r\n        <Services></Services>\r\n        <Contact></Contact>\r\n      </main>\r\n    </React.Suspense>\r\n  );\r\n};\r\n\r\nexport default OnePageWebSite;\r\n","import React, { Suspense } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { MainLayout } from './Components/Layout';\r\nimport OnePageWebSite from './Pages/OnePageWebSite/OnePageWebSite';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <MainLayout>\r\n          <OnePageWebSite></OnePageWebSite>\r\n        </MainLayout>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n// import \"../node_modules/@fortawesome/fontawesome-free/css/all.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}